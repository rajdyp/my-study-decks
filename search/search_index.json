{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<pre><code>/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n\n                    ____                __                 __           __  _           \n                   / __ \\___  ___   ___/ /__ ___ __  ___ _/ /_  ___ _  / /_(_)_ _  ___  \n                  / /_/ / _ \\/ -_) / _  / _ `/ // / / _ `/ __/ / _ `/ / __/ /  ' \\/ -_) \n                  \\____/_//_/\\__/  \\_,_/\\_,_/\\_, /  \\_,_/\\__/  \\_,_/  \\__/_/_/_/_/\\__(_)\n                                            /___/                                       \n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /\n</code></pre>"},{"location":"aws/aws/","title":"Info","text":"<pre><code>Users \n    &gt; Add users (specify user details) \n        &gt; Add user to group (set permission) \n            &gt; Create group + attach permissions policies \n                &gt; select group \n                    &gt; Create user\n</code></pre> <p>Default VPC = private network Security group = instance level firewall </p> <p>Block storage vs Object storage vs File storage</p>"},{"location":"aws/aws/#cloudtrail","title":"CloudTrail","text":"<ul> <li>Events</li> <li>Management events - Capture management operations.</li> <li>Data events - Log resource operations.</li> <li>Insights events - Identify unusual activity, errors, or user behavior.</li> </ul>"},{"location":"aws/aws_cli/","title":"AWS CLI commands","text":""},{"location":"aws/aws_cli/#basic","title":"Basic","text":"<pre><code>aws --version\n</code></pre> <pre><code>aws help\n</code></pre> <pre><code>aws configure  # configure AWS CLI access key\n</code></pre>"},{"location":"aws/aws_cli/#iam","title":"IAM","text":"<pre><code>aws iam list-users\n</code></pre> <pre><code>aws iam get-user --user-name &lt;user_name&gt;\n</code></pre> <pre><code>aws iam create-user --user-name &lt;user_name&gt;\n</code></pre> <pre><code>aws iam list-groups\n</code></pre> <pre><code>aws iam get-group --group-name &lt;group_mame&gt; \n</code></pre> <pre><code>aws iam create-group --group-name &lt;group_mame&gt; \n</code></pre> <pre><code>aws iam add-user-to-group --user-name &lt;user_name&gt; --group-name &lt;group_mame&gt; \n</code></pre>"},{"location":"aws/aws_cli/#s3","title":"S3","text":"<pre><code>aws s3 ls\n</code></pre> <pre><code>aws s3 mb s3://&lt;bucket_name&gt;  # bucket name has to be globally unique\n</code></pre>"},{"location":"aws/test/","title":"Data Structures &amp; Algorithms","text":""},{"location":"aws/test/#arrays","title":"Arrays","text":""},{"location":"aws/test/#1-find-the-maximum-and-minimum-element-in-an-array","title":"1. Find the maximum and minimum element in an array","text":"Solution  <pre><code>[Quip sheet](https://quip.com/nGUcAIF3bnXz/DSA-Leetcode-Spaced-Repetition-Sheet)\n</code></pre> <pre><code>Given an array of integers, write a function to find the maximum and minimum elements in the array.\na = [5, 2, 9, 1, 5, 6]\nMaximum element: 9\nMinimum element: 1\n\nConstraints:\n- The array may be empty, in which case return None for both the maximum and minimum.\n- Find the max and min elements with a time complexity better than O(n) if possible.\n</code></pre>"},{"location":"aws/test/#2-reverse-an-array","title":"2. Reverse an array","text":"<pre><code>Given an array of integers, write a function to find the maximum and minimum elements in the array.\na = [5, 2, 9, 1, 5, 6]\nMaximum element: 9\nMinimum element: 1\n\nConstraints:\n- The array may be empty, in which case return None for both the maximum and minimum.\n- Find the max and min elements with a time complexity better than O(n) if possible.\n</code></pre>  Solution   <pre><code>Given an array of integers, write a function that reverses the elements of the array in place.\n(i.e. modify the original array without using additional data structures)\na = [1, 2, 3, 4, 5]\n\nConstraints:\n- The input array may be empty.\n- The array may contain both positive and negative integers.\n- The array can have duplicate elements.\n</code></pre>  &gt; [Problem solution](https://github.com/rajdyp/rajdyp.github.io/blob/master/python/solutions/reverse_an_array.md)"},{"location":"aws/test/#3-reverse-an-array-again","title":"3. Reverse an array again","text":"Solution    Find the sum of all elements in an array  <pre><code>Given an array of integers, write a function that calculates the sum of all the elements in the array.\na = [1, 2, 3, 4, 5]\n\nConstraints:\n- The input array may be empty.\n- The array may contain both positive and negative integers.\n- The array can have duplicate elements.\n</code></pre>  &gt; [Problem solution](https://github.com/rajdyp/rajdyp.github.io/blob/master/python/solutions/sum_of_all_elements_in_array.md)   Find the second largest element in an array  <pre><code>Find the second largest element in an array\n</code></pre>  &gt; [Problem solution]()   Check if an array is sorted  <pre><code>Check if an array is sorted\n</code></pre>  &gt; [Problem solution]()   Remove duplicates from a sorted array  <pre><code>Remove duplicates from a sorted array\n</code></pre>  &gt; [Problem solution]()   Rotate an array to the right by K positions  <pre><code>Rotate an array to the right by K positions\n</code></pre>  &gt; [Problem solution]()"},{"location":"aws/test/#strings","title":"Strings","text":""},{"location":"aws/test/#1-check-if-a-string-is-a-palindrome","title":"1. Check if a string is a palindrome","text":"Check if a string is a palindrome  <pre><code>Check if a string is a palindrome\n</code></pre>  &gt; [Problem solution]()"},{"location":"aws/test/#2-count-the-number-of-vowels-and-consonants-in-a-string","title":"2. Count the number of vowels and consonants in a string","text":"Count the number of vowels and consonants in a string  <pre><code>Count the number of vowels and consonants in a string\n</code></pre>  &gt; [Problem solution]()"},{"location":"aws/test/#3-reverse-a-string","title":"3.  Reverse a string","text":"Reverse a string  <pre><code>Reverse a string\n</code></pre>  &gt; [Problem solution]()   Check if two strings are anagrams  <pre><code>Check if two strings are anagrams\n</code></pre>  &gt; [Problem solution]()   Implement string concatenation without using the + operator  <pre><code>Implement string concatenation without using the + operator\n</code></pre>  &gt; [Problem solution]()  <p><code>Linked Lists</code></p>  Implement a singly linked list and perform basic operations (insertion, deletion, traversal)  <pre><code>Implement a singly linked list and perform basic operations (insertion, deletion, traversal)\n</code></pre>  &gt; [Problem solution]()   Reverse a linked list  <pre><code>Reverse a linked list\n</code></pre>  &gt; [Problem solution]()   Find the middle of a linked list  <pre><code>Find the middle of a linked list\n</code></pre>  &gt; [Problem solution]()   Detect a cycle in a linked list  <pre><code>Detect a cycle in a linked list\n</code></pre>  &gt; [Problem solution]()"},{"location":"aws/test/#stacks-and-queues","title":"Stacks and Queues","text":""},{"location":"aws/test/#1-implement-a-stack-and-perform-basic-operations-push-pop","title":"1. Implement a stack and perform basic operations (push, pop)","text":"Implement a stack and perform basic operations (push, pop)  <pre><code>Implement a stack and perform basic operations (push, pop)\n</code></pre>  &gt; [Problem solution]()"},{"location":"aws/test/#2-implement-a-queue-and-perform-basic-operations-enqueue-dequeue","title":"2. Implement a queue and perform basic operations (enqueue, dequeue","text":"Implement a queue and perform basic operations (enqueue, dequeue)  <pre><code>Implement a queue and perform basic operations (enqueue, dequeue)\n</code></pre>  &gt; [Problem solution]()   Implement a stack using two queues  <pre><code>Implement a stack using two queues\n</code></pre>  &gt; [Problem solution]()   Implement a queue using two stacks  <pre><code>Implement a queue using two stacks\n</code></pre>  &gt; [Problem solution]()  <p><code>Search and Sort</code></p>  Implement linear search and binary search  <pre><code>Implement linear search and binary search\n</code></pre>  &gt; [Problem solution]()   Implement selection sort and bubble sort  <pre><code>Implement selection sort and bubble sort\n</code></pre>  &gt; [Problem solution]()   Find the intersection of two sorted arrays  <pre><code>Find the intersection of two sorted arrays\n</code></pre>  &gt; [Problem solution]()   Merge two sorted arrays  <pre><code>Merge two sorted arrays\n</code></pre>  &gt; [Problem solution]()   Find the kth largest/smallest element in an unsorted array  <pre><code>Find the kth largest/smallest element in an unsorted array\n</code></pre>  &gt; [Problem solution]()  <p><code>Recursion</code></p>  Implement factorial of a number using recursion  <pre><code>Implement factorial of a number using recursion\n</code></pre>  &gt; [Problem solution]()   Implement Fibonacci series using recursion  <pre><code>Implement Fibonacci series using recursion\n</code></pre>  &gt; [Problem solution]()   Implement the Tower of Hanoi problem using recursion  <pre><code>Implement the Tower of Hanoi problem using recursion\n</code></pre>  &gt; [Problem solution]()   Check if a given string is a palindrome using recursion  <pre><code>Check if a given string is a palindrome using recursion\n</code></pre>  &gt; [Problem solution]()  <p><code>Trees</code></p>  Implement a binary tree and perform basic tree traversal (in-order, pre-order, post-order)  <pre><code>Implement a binary tree and perform basic tree traversal (in-order, pre-order, post-order)\n</code></pre>  &gt; [Problem solution]()   Find the height of a binary tree  <pre><code>Find the height of a binary tree\n</code></pre>  &gt; [Problem solution]()   Check if a binary tree is a binary search tree (BST)  <pre><code>Check if a binary tree is a binary search tree (BST)\n</code></pre>  &gt; [Problem solution]()   Find the lowest common ancestor (LCA) of two nodes in a binary tree  <pre><code>Find the lowest common ancestor (LCA) of two nodes in a binary tree\n</code></pre>  &gt; [Problem solution]()  <p><code>Graphs</code></p>  Implement a graph and perform basic operations (add vertex, add edge)  <pre><code>Implement a graph and perform basic operations (add vertex, add edge)\n</code></pre>  &gt; [Problem solution]()   Perform depth-first search (DFS) on a graph  <pre><code>Perform depth-first search (DFS) on a graph\n</code></pre>  &gt; [Problem solution]()   Perform breadth-first search (BFS) on a graph  <pre><code>Perform breadth-first search (BFS) on a graph\n</code></pre>  &gt; [Problem solution]()   Find the shortest path between two nodes in a graph (Dijkstra's or BFS)  <pre><code>Find the shortest path between two nodes in a graph (Dijkstra's or BFS)\n</code></pre>  &gt; [Problem solution]()  <p><code>Dynamic Programming</code></p>  Implement a function to find the nth Fibonacci number using dynamic programming  <pre><code>Implement a function to find the nth Fibonacci number using dynamic programming\n</code></pre>  &gt; [Problem solution]()   Implement a function to find the factorial of a number using dynamic programming  <pre><code>Implement a function to find the factorial of a number using dynamic programming\n</code></pre>  &gt; [Problem solution]()   Find the maximum subarray sum using dynamic programming (Kadane's algorithm)  <pre><code>Find the maximum subarray sum using dynamic programming (Kadane's algorithm)\n</code></pre>  &gt; [Problem solution]()"},{"location":"aws/test/#neetcode-150","title":"NeetCode 150","text":"Contains duplicate  <pre><code>Given an integer array nums, return true if any value appears at least twice in the array, and return false if every\nelement is distinct.\n\nExample 1:\nInput: nums = [1,2,3,1]\nOutput: true\n\nExample 2:\nInput: nums = [1,2,3,4]\nOutput: false\n\nExample 3:\nInput: nums = [1,1,1,3,3,4,3,2,4,2]\nOutput: true\n\nConstraints:\n- 1 &lt;= nums.length &lt;= 105\n- -109 &lt;= nums[i] &lt;= 109\n</code></pre>  &gt; [Problem solution](https://github.com/rajdyp/rajdyp.github.io/blob/master/python/solutions/contains_duplicate.md)   Valid anagram  <pre><code>Given two strings s and t, return true if t is an anagram of s, and false otherwise.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all\nthe original letters exactly once.\n\nExample 1:\nInput: s = \"anagram\", t = \"nagaram\"\nOutput: true\n\nExample 2:\nInput: s = \"rat\", t = \"car\"\nOutput: false\n\nConstraints:\n- 1 &lt;= s.length, t.length &lt;= 5 * 104\n- s and t consist of lowercase English letters.\n</code></pre>  &gt; [Problem solution](https://github.com/rajdyp/rajdyp.github.io/blob/master/python/solutions/valid_anagram.md)   Two sum  <pre><code>Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to\ntarget. You may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.\n\nExample 1:\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n\nExample 2:\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\n\nExample 3:\nInput: nums = [3,3], target = 6\nOutput: [0,1]\n\nConstraints:\n- 2 &lt;= nums.length &lt;= 104\n- -109 &lt;= nums[i] &lt;= 109\n- -109 &lt;= target &lt;= 109\n- Only one valid answer exists.\n</code></pre>  &gt; [Problem solution](https://github.com/rajdyp/rajdyp.github.io/blob/master/python/solutions/two_sum.md)   Valid palindrome  <pre><code>A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all\nnon-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and\nnumbers. Given a string s, return true if it is a palindrome, or false otherwise.\n\nExample 1:\nInput: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.\n\nExample 2:\nInput: s = \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome.\n\nExample 3:\nInput: s = \" \"\nOutput: true\nExplanation: s is an empty string \"\" after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\n\nConstraints:\n- 1 &lt;= s.length &lt;= 2 * 105\n- s consists only of printable ASCII characters.\n</code></pre>  &gt; [Problem solution](https://github.com/rajdyp/rajdyp.github.io/blob/master/python/solutions/valid_palindrome.md)   Best time to buy and sell stock  <pre><code>You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize\nyour profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n\nExample 1:\nInput: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n\nExample 2:\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.\n\nConstraints:\n- 1 &lt;= prices.length &lt;= 105\n- 0 &lt;= prices[i] &lt;= 104\n</code></pre>  &gt; [Problem solution](https://github.com/rajdyp/rajdyp.github.io/blob/master/python/solutions/best_time_to_buy_sell_stock.md)   Valid parentheses  <pre><code>Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n- Open brackets must be closed by the same type of brackets.\n- Open brackets must be closed in the correct order.\n- Every close bracket has a corresponding open bracket of the same type.\n\nExample 1:\nInput: s = \"()\"\nOutput: true\n\nExample 2:\nInput: s = \"()[]{}\"\nOutput: true\n\nExample 3:\nInput: s = \"(]\"\nOutput: false\n\nConstraints:\n- 1 &lt;= s.length &lt;= 104\n- s consists of parentheses only '()[]{}'.\n</code></pre>  &gt; [Problem solution](https://github.com/rajdyp/rajdyp.github.io/blob/master/python/solutions/valid_parentheses.md)   Binary search  <pre><code>Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to\nsearch target in nums. If target exists, then return its index. Otherwise, return -1. You must write an algorithm\nwith O(log n) runtime complexity.\n\nExample 1:\nInput: nums = [-1,0,3,5,9,12], target = 9\nOutput: 4\nExplanation: 9 exists in nums and its index is 4\n\nExample 2:\nInput: nums = [-1,0,3,5,9,12], target = 2\nOutput: -1\nExplanation: 2 does not exist in nums so return -1\n\nConstraints:\n- 1 &lt;= nums.length &lt;= 104\n- -10**4 &lt; nums[i], target &lt; 10**4\n- All the integers in nums are unique.\n- nums is sorted in ascending order.\n</code></pre>  &gt; [Problem solution](https://github.com/rajdyp/rajdyp.github.io/blob/master/python/solutions/binary_search.md)"},{"location":"aws/flashcards/flashcards/","title":"Data Structures &amp; Algorithms","text":""},{"location":"aws/flashcards/flashcards/#basic-problems-find-the-maximum-and-minimum-element-in-an-array","title":"Basic problems Find the maximum and minimum element in an array","text":"<p><code>Arrays</code></p>  Find the maximum and minimum element in an array  <pre><code>Given an array of integers, write a function to find the maximum and minimum elements in the array.\na = [5, 2, 9, 1, 5, 6]\nMaximum element: 9\nMinimum element: 1\n\nConstraints:\n- The array may be empty, in which case return None for both the maximum and minimum.\n- Find the max and min elements with a time complexity better than O(n) if possible.\n</code></pre>  &gt; [Problem solution](https://github.com/rajdyp/rajdyp.github.io/blob/master/python/solutions/max_and_min_in_an_array.md)   Reverse an array  <pre><code>Given an array of integers, write a function that reverses the elements of the array in place.\n(i.e. modify the original array without using additional data structures)\na = [1, 2, 3, 4, 5]\n\nConstraints:\n- The input array may be empty.\n- The array may contain both positive and negative integers.\n- The array can have duplicate elements.\n</code></pre>  &gt; [Problem solution](https://github.com/rajdyp/rajdyp.github.io/blob/master/python/solutions/reverse_an_array.md)   Find the sum of all elements in an array  <pre><code>Given an array of integers, write a function that calculates the sum of all the elements in the array.\na = [1, 2, 3, 4, 5]\n\nConstraints:\n- The input array may be empty.\n- The array may contain both positive and negative integers.\n- The array can have duplicate elements.\n</code></pre>  &gt; [Problem solution](https://github.com/rajdyp/rajdyp.github.io/blob/master/python/solutions/sum_of_all_elements_in_array.md)   Find the second largest element in an array  <pre><code>Find the second largest element in an array\n</code></pre>  &gt; [Problem solution]()   Check if an array is sorted  <pre><code>Check if an array is sorted\n</code></pre>  &gt; [Problem solution]()   Remove duplicates from a sorted array  <pre><code>Remove duplicates from a sorted array\n</code></pre>  &gt; [Problem solution]()   Rotate an array to the right by K positions  <pre><code>Rotate an array to the right by K positions\n</code></pre>  &gt; [Problem solution]()  <p><code>Strings</code></p>  Check if a string is a palindrome  <pre><code>Check if a string is a palindrome\n</code></pre>  &gt; [Problem solution]()   Count the number of vowels and consonants in a string  <pre><code>Count the number of vowels and consonants in a string\n</code></pre>  &gt; [Problem solution]()   Reverse a string  <pre><code>Reverse a string\n</code></pre>  &gt; [Problem solution]()   Check if two strings are anagrams  <pre><code>Check if two strings are anagrams\n</code></pre>  &gt; [Problem solution]()   Implement string concatenation without using the + operator  <pre><code>Implement string concatenation without using the + operator\n</code></pre>  &gt; [Problem solution]()  <p><code>Linked Lists</code></p>  Implement a singly linked list and perform basic operations (insertion, deletion, traversal)  <pre><code>Implement a singly linked list and perform basic operations (insertion, deletion, traversal)\n</code></pre>  &gt; [Problem solution]()   Reverse a linked list  <pre><code>Reverse a linked list\n</code></pre>  &gt; [Problem solution]()   Find the middle of a linked list  <pre><code>Find the middle of a linked list\n</code></pre>  &gt; [Problem solution]()   Detect a cycle in a linked list  <pre><code>Detect a cycle in a linked list\n</code></pre>  &gt; [Problem solution]()  <p><code>Stacks and Queues</code></p>  Implement a stack and perform basic operations (push, pop)  <pre><code>Implement a stack and perform basic operations (push, pop)\n</code></pre>  &gt; [Problem solution]()   Implement a queue and perform basic operations (enqueue, dequeue)  <pre><code>Implement a queue and perform basic operations (enqueue, dequeue)\n</code></pre>  &gt; [Problem solution]()   Implement a stack using two queues  <pre><code>Implement a stack using two queues\n</code></pre>  &gt; [Problem solution]()   Implement a queue using two stacks  <pre><code>Implement a queue using two stacks\n</code></pre>  &gt; [Problem solution]()  <p><code>Search and Sort</code></p>  Implement linear search and binary search  <pre><code>Implement linear search and binary search\n</code></pre>  &gt; [Problem solution]()   Implement selection sort and bubble sort  <pre><code>Implement selection sort and bubble sort\n</code></pre>  &gt; [Problem solution]()   Find the intersection of two sorted arrays  <pre><code>Find the intersection of two sorted arrays\n</code></pre>  &gt; [Problem solution]()   Merge two sorted arrays  <pre><code>Merge two sorted arrays\n</code></pre>  &gt; [Problem solution]()   Find the kth largest/smallest element in an unsorted array  <pre><code>Find the kth largest/smallest element in an unsorted array\n</code></pre>  &gt; [Problem solution]()  <p><code>Recursion</code></p>  Implement factorial of a number using recursion  <pre><code>Implement factorial of a number using recursion\n</code></pre>  &gt; [Problem solution]()   Implement Fibonacci series using recursion  <pre><code>Implement Fibonacci series using recursion\n</code></pre>  &gt; [Problem solution]()   Implement the Tower of Hanoi problem using recursion  <pre><code>Implement the Tower of Hanoi problem using recursion\n</code></pre>  &gt; [Problem solution]()   Check if a given string is a palindrome using recursion  <pre><code>Check if a given string is a palindrome using recursion\n</code></pre>  &gt; [Problem solution]()  <p><code>Trees</code></p>  Implement a binary tree and perform basic tree traversal (in-order, pre-order, post-order)  <pre><code>Implement a binary tree and perform basic tree traversal (in-order, pre-order, post-order)\n</code></pre>  &gt; [Problem solution]()   Find the height of a binary tree  <pre><code>Find the height of a binary tree\n</code></pre>  &gt; [Problem solution]()   Check if a binary tree is a binary search tree (BST)  <pre><code>Check if a binary tree is a binary search tree (BST)\n</code></pre>  &gt; [Problem solution]()   Find the lowest common ancestor (LCA) of two nodes in a binary tree  <pre><code>Find the lowest common ancestor (LCA) of two nodes in a binary tree\n</code></pre>  &gt; [Problem solution]()  <p><code>Graphs</code></p>  Implement a graph and perform basic operations (add vertex, add edge)  <pre><code>Implement a graph and perform basic operations (add vertex, add edge)\n</code></pre>  &gt; [Problem solution]()   Perform depth-first search (DFS) on a graph  <pre><code>Perform depth-first search (DFS) on a graph\n</code></pre>  &gt; [Problem solution]()   Perform breadth-first search (BFS) on a graph  <pre><code>Perform breadth-first search (BFS) on a graph\n</code></pre>  &gt; [Problem solution]()   Find the shortest path between two nodes in a graph (Dijkstra's or BFS)  <pre><code>Find the shortest path between two nodes in a graph (Dijkstra's or BFS)\n</code></pre>  &gt; [Problem solution]()  <p><code>Dynamic Programming</code></p>  Implement a function to find the nth Fibonacci number using dynamic programming  <pre><code>Implement a function to find the nth Fibonacci number using dynamic programming\n</code></pre>  &gt; [Problem solution]()   Implement a function to find the factorial of a number using dynamic programming  <pre><code>Implement a function to find the factorial of a number using dynamic programming\n</code></pre>  &gt; [Problem solution]()   Find the maximum subarray sum using dynamic programming (Kadane's algorithm)  <pre><code>Find the maximum subarray sum using dynamic programming (Kadane's algorithm)\n</code></pre>  &gt; [Problem solution]()"},{"location":"aws/flashcards/flashcards/#neetcode-150-find-the-maximum-and-minimum-element-in-an-array-find-the-maximum-and-minimum-element-in-an-array","title":"NeetCode 150 Find the maximum and minimum element in an array Find the maximum and minimum element in an array","text":"Contains duplicate  <pre><code>Given an integer array nums, return true if any value appears at least twice in the array, and return false if every\nelement is distinct.\n\nExample 1:\nInput: nums = [1,2,3,1]\nOutput: true\n\nExample 2:\nInput: nums = [1,2,3,4]\nOutput: false\n\nExample 3:\nInput: nums = [1,1,1,3,3,4,3,2,4,2]\nOutput: true\n\nConstraints:\n- 1 &lt;= nums.length &lt;= 105\n- -109 &lt;= nums[i] &lt;= 109\n</code></pre>  &gt; [Problem solution](https://github.com/rajdyp/rajdyp.github.io/blob/master/python/solutions/contains_duplicate.md)   Valid anagram  <pre><code>Given two strings s and t, return true if t is an anagram of s, and false otherwise.\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all\nthe original letters exactly once.\n\nExample 1:\nInput: s = \"anagram\", t = \"nagaram\"\nOutput: true\n\nExample 2:\nInput: s = \"rat\", t = \"car\"\nOutput: false\n\nConstraints:\n- 1 &lt;= s.length, t.length &lt;= 5 * 104\n- s and t consist of lowercase English letters.\n</code></pre>  &gt; [Problem solution](https://github.com/rajdyp/rajdyp.github.io/blob/master/python/solutions/valid_anagram.md)   Two sum  <pre><code>Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to\ntarget. You may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.\n\nExample 1:\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n\nExample 2:\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\n\nExample 3:\nInput: nums = [3,3], target = 6\nOutput: [0,1]\n\nConstraints:\n- 2 &lt;= nums.length &lt;= 104\n- -109 &lt;= nums[i] &lt;= 109\n- -109 &lt;= target &lt;= 109\n- Only one valid answer exists.\n</code></pre>  &gt; [Problem solution](https://github.com/rajdyp/rajdyp.github.io/blob/master/python/solutions/two_sum.md)   Valid palindrome  <pre><code>A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all\nnon-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and\nnumbers. Given a string s, return true if it is a palindrome, or false otherwise.\n\nExample 1:\nInput: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.\n\nExample 2:\nInput: s = \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome.\n\nExample 3:\nInput: s = \" \"\nOutput: true\nExplanation: s is an empty string \"\" after removing non-alphanumeric characters.\nSince an empty string reads the same forward and backward, it is a palindrome.\n\nConstraints:\n- 1 &lt;= s.length &lt;= 2 * 105\n- s consists only of printable ASCII characters.\n</code></pre>  &gt; [Problem solution](https://github.com/rajdyp/rajdyp.github.io/blob/master/python/solutions/valid_palindrome.md)   Best time to buy and sell stock  <pre><code>You are given an array prices where prices[i] is the price of a given stock on the ith day. You want to maximize\nyour profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\n\nExample 1:\nInput: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n\nExample 2:\nInput: prices = [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transactions are done and the max profit = 0.\n\nConstraints:\n- 1 &lt;= prices.length &lt;= 105\n- 0 &lt;= prices[i] &lt;= 104\n</code></pre>  &gt; [Problem solution](https://github.com/rajdyp/rajdyp.github.io/blob/master/python/solutions/best_time_to_buy_sell_stock.md)   Valid parentheses  <pre><code>Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n- Open brackets must be closed by the same type of brackets.\n- Open brackets must be closed in the correct order.\n- Every close bracket has a corresponding open bracket of the same type.\n\nExample 1:\nInput: s = \"()\"\nOutput: true\n\nExample 2:\nInput: s = \"()[]{}\"\nOutput: true\n\nExample 3:\nInput: s = \"(]\"\nOutput: false\n\nConstraints:\n- 1 &lt;= s.length &lt;= 104\n- s consists of parentheses only '()[]{}'.\n</code></pre>  &gt; [Problem solution](https://github.com/rajdyp/rajdyp.github.io/blob/master/python/solutions/valid_parentheses.md)   Binary search  <pre><code>Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to\nsearch target in nums. If target exists, then return its index. Otherwise, return -1. You must write an algorithm\nwith O(log n) runtime complexity.\n\nExample 1:\nInput: nums = [-1,0,3,5,9,12], target = 9\nOutput: 4\nExplanation: 9 exists in nums and its index is 4\n\nExample 2:\nInput: nums = [-1,0,3,5,9,12], target = 2\nOutput: -1\nExplanation: 2 does not exist in nums so return -1\n\nConstraints:\n- 1 &lt;= nums.length &lt;= 104\n- -10**4 &lt; nums[i], target &lt; 10**4\n- All the integers in nums are unique.\n- nums is sorted in ascending order.\n</code></pre>  &gt; [Problem solution](https://github.com/rajdyp/rajdyp.github.io/blob/master/python/solutions/binary_search.md)"},{"location":"python/test/","title":"Test file","text":""}]}